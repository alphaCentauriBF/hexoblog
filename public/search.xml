<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo+Nginx的部署]]></title>
    <url>%2F2019%2F04%2F01%2FHexo-Nginx%E7%9A%84%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[为什么选择Nginx手上有一台VPS，5美元一个月，如果不物尽其用的话就会觉得很浪费，再者，部署在GitHub上总让我有一种不爽的感觉，所以决定自己利用VPS加上nginx来部署，这样不仅速度更快，也能从中学到东西。 部署思路使用nginx部署有两种方式，一种是在本地运行Hexo server，直接转发本地的4000端口，这种方法的优点就是简单，缺点就是不优雅，不够快。第二种是代理静态文件，我这里选择了第二种。下面给出配置文件的部分内容。 12345678910111213141516171819202122232425262728server &#123; server_name www.fengguifan.icu fengguifan.icu listen 80 default; root /root/myblog/public; access_log /var/log/nginx/blog_access.log; error_log /var/log/nginx/blog_error.log; error_page 404 = /404.html; location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ &#123; root /root/myblog/public; access_log off; expires 1d; &#125; location ~* ^.+\.(css|js|txt|xml|swf|wav)$ &#123; root /root/myblog/public; access_log off; expires 10m; &#125; location / &#123; root /root/myblog/public; if (-f $request_filename) &#123; rewrite ^/(.*)$ /$1 break; &#125; &#125; location /nginx_status &#123; stub_status on; access_log off; &#125; &#125; 这种方式也挺简单，但是更优雅。 Centos7请注意 部署之后记得在防火墙开启80端口。 $ firewall-cmd --zone=public --add-port=80/tcp --permanent #永久开发80端口 $ systemctl [start/stop/restart] firewalld #开启，停止，重启firewalld $ firewall-cmd --zone=public --list-ports #列出已开放的端口 使用阿里云的同学请记得在安全组规则那里配置一下。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux Screen命令]]></title>
    <url>%2F2019%2F04%2F01%2FLinux-Screen%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Screen的作用经常使用Linux的朋友可能会经常有以下的场景： 我们使用ssh或telnet远程登录到Linux服务器，需要运行一个需要很长时间会完成的进程。当我们关闭掉窗口后，进程也会随之中止，而Screen给我们提供了这样的一个环境：只要我们在Screen环境中运行进程，即使退出窗口进程也不会中止，再次登录后也可以用 $ screen -r &lt;id&gt; 的方式来恢复会话，这样可以有效地防止网络中断等问题带来地进程终止。 screen具有下述的功能 会话恢复 多窗口 会话共享 关于screen的详情请自主查询，这里给出常用的几条命令。 Screen 常用参数在使用之前先安装 $ yum install screen #centos $ sudo apt-get install screen #ubuntu $ screen -S &lt;name&gt; #新建一个名为的会话 $ screen -ls #列出当前的所有会话 $ screen -r &lt;name&gt; #回到yourname这个session]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github基础向导]]></title>
    <url>%2F2019%2F04%2F01%2Fgithub%E5%9F%BA%E7%A1%80%E5%90%91%E5%AF%BC%2F</url>
    <content type="text"><![CDATA[GitHub向导 https://guides.github.com/activities/hello-world/ Hello World 项目与学习很多语言相同，我们从一个Hello，World项目开始。 在这个项目你将会学到: 创建和使用仓库 开始和管理分支 更改文件并推送到Github 发起和合并pull request 第一步 创建仓库 仓库( repository)通常用来管理单个项目，仓库可以包含目录(folder)和文件、图片、视频、电子表格、数据集等等你项目所需要的所有东西，我们建议包含README文件(可以理解成备注，当其他人获取你的项目后，一般是先看README文件)，或者一个包含项目信息文件，GitHub可以在创建新存储库的同时轻松地添加一个README文件。 它还提供其他常见选项，例如许可证(license)文件。 你的Hello，World仓库可以成为一个你存放灵感、源码或者与别人进行分享和交流的地方。 创建仓库的步骤 在右上角的头像旁有一个＋号，点击＋号并选择 New repository 给项目取名为 HelloWorld 写下简短的描述 选择 Initialize this repository with a README. 下面给出图片以及说明 第二步 创建分支分支是一种能让我们在不同版本的存储库上工作的方式(例如在实际开发中，有稳定版本和测试版本，可以通过设置不同的分支来实现)。 默认的，你的仓库只有一个名为master的分支，这个分支被认为是主干分支，也就是最终的分支。在将新的修改合并到主干分支之前，我们利用其他分支来进行测试。 当你创建一个新的分支时，你会得到一份副本(making a copy,or snapshot)，当你在自己的分支进行工作而其他人对主干进行修改时，你可以拉取(pull)这些更新。 上述的图片表示了 主干分支 一个名为feature的分支 feature分支在合并到主干分支时所经历的旅程(在测试通过后提交Pull Request，项目的管理者可以决定要不要合并到主干分支)。 在GitHub，开发者、作者和设计师可以使用分支的方式来修复BUG或者提交新功能,而在修改的过程中不影响主干。当一次修改做好时，可以与主干合并(merge)。 创建分支 前往你创建的仓库 点击文件顶的名为branch:master的下拉框 在输入框Find or create branch中输入分支名readme-edits以创建新的分支 点击Create Branch 现在，你拥有两个分支了，他们看起来一样，但接下来我们会对新分支进行改变。 第三步 修改和提交修改现在，你已经处于readme-edits分支(master分支的复制)了，如下图。 在Branch按钮处可以看到当前所处的分支:readme-edits 在GitHub中，保存修改被称为Commits，每个commit都有一个与之关联的commit信息(message)，用来解释为什么做这个修改等。从提交消息中，你和其他人都可以知道做出的修改的历史。 修改与提交(commit)修改步骤 下面以README.md文件为例，在实际使用中可以任意选择文件。 选择README.md文件 点击文件右上的“笔”图标对文件进行编辑 在编辑器中，写入一些文字 对你的修改进行说明 点击Commit changes进行提交 步骤1 步骤3、4、5 提交之后，可以看到如下的情况。 第四步 发起Pull Request漂亮的修改嗷。但是现在主干(master)分支并没有发生修改，如果你想要将这个修改合并到master分支中华，你可以发起一个Pull Request。 Pull Request是GitHub中协作开发的核心，当你发起一个Pull Request，意味着你想让你的修改被别人审核并合并到他们的分支中，Pull Request会显示分支的不同，增加的部分显示为绿色，减少的部分显示为红色。当你提交(commit)的时候，即使代码并未完成，你可以发起一个Pull Request并展开讨论。 通过Github在Pull Request的 @mention system，你可以得到他人或者其他团队的反馈。你也可以在自己的仓库中发起Pull Request并自己合并，这样子你可以在参与大项目的开发之前。 学习到使用Github的工作流。 对对README文件的修改发起一个Pull Request（并不是病句） 第五步 合并Pull Request在这一步中，你可以将Pull Request合并到主干分支中。因为这个项目我们自己就是管理员，所以可以直接merge。 点击绿色的 Merge pull request按钮将你的分支合并到master 点击 Confirm merge. 删除readme-edit分支，因为它的更改已合并，点击紫色框中的删除分支按钮 关于GitHub使用的简单教程就到这里，在其他部分会有更加高级的用法，比如实战等等。请查看其他部分。]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github向导]]></title>
    <url>%2F2019%2F04%2F01%2Fgithub%E5%90%91%E5%AF%BC%2F</url>
    <content type="text"><![CDATA[Github介绍与前言为什么要使用Git可能我们在很多地方都听说过GitHub,却不清楚它的用法，在了解GitHub前，我们需要先了解git。 Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. 上面是从官网找出来的定义，Git是一个分布式版本控制系统，利用git，我们可以很好地进行版本管理。对于一个项目而言，我们可以把代码放在Git仓库中，每个小组的成员都可以从这个仓库中取得这份代码的一个副本(fork)，在本地进行修改，进行测试调试后可以与仓库中的版本进行合并。通过git的使用，可以不用将文件传来传去，git还会记录下每一次的更改以及更改内容，git还有很多强大的功能，详细可以在以下网址了解。 廖雪峰https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001373962845513aefd77a99f4145f0a2c7a7ca057e7570000 GitHub与GitGit有一个强大功能，就是远程仓库，我们可以找一台服务器充当运行Git的服务器，每天24小时开机，其他人可以从这个仓库“克隆”一份到自己的电脑上，并且各自把自己的推送提交到远程服务器的仓库中。而Github这个网站，就是提供了Git仓库托管的服务，只要注册了一个Github账号，就可以免费获得Git远程仓库。 下面是官网的介绍 GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. 注册GitHub账号注册的细节就不在这里给出，自己摸索去。]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇文章]]></title>
    <url>%2F2019%2F04%2F01%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[关于这台服务器这台服务器是原本为了fq所购买的一台服务器(vultr日本服务器，5美元一个月)，后面觉得拥有这么高的带宽和流量仅仅用来fq也太浪费了，所以在上面搭了一个博客，也就是现在我们看到的。还搭了一个图床，方便写文章贴图使用。以后我的阿里云服务器就不再续费了。 关于博客的搭建博客的搭建使用的是Hexo，Hexo是一个静态博客，但写文章没有那么不方便，因为文章可以通过包含markdown语法的文件直接生成静态网页，且Hexo也包含许多有意思的插件，昨天我就玩了一天。 关于fq私聊，你懂的 关于图床使用lamp配合chevereto]]></content>
      <categories>
        <category>七七八八</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
</search>
